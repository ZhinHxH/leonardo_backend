"""
Script para configurar dispositivos ZKTeco y talanquera
"""
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.fingerprint import DeviceConfig
from app.services.turnstile_service import TurnstileService

def configure_default_devices():
    """Configura dispositivos por defecto"""
    db = next(get_db())
    
    try:
        # Configurar panel inBIO principal
        inbio_device = DeviceConfig(
            device_name="inBIO Principal",
            device_ip="192.168.1.100",
            device_port=4370,
            device_id="INBIO001",
            is_active=True,
            auto_sync=True,
            sync_interval=300,
            turnstile_enabled=True,
            turnstile_relay_port=1,
            access_duration=5
        )
        
        # Verificar si ya existe
        existing = db.query(DeviceConfig).filter(
            DeviceConfig.device_ip == inbio_device.device_ip
        ).first()
        
        if not existing:
            db.add(inbio_device)
            print("‚úÖ Panel inBIO configurado")
        else:
            print("‚ÑπÔ∏è  Panel inBIO ya existe")
        
        # Configurar panel inBIO secundario (opcional)
        inbio_device_2 = DeviceConfig(
            device_name="inBIO Secundario",
            device_ip="192.168.1.101",
            device_port=4370,
            device_id="INBIO002",
            is_active=False,  # Inactivo por defecto
            auto_sync=False,
            sync_interval=300,
            turnstile_enabled=False,
            turnstile_relay_port=2,
            access_duration=5
        )
        
        existing_2 = db.query(DeviceConfig).filter(
            DeviceConfig.device_ip == inbio_device_2.device_ip
        ).first()
        
        if not existing_2:
            db.add(inbio_device_2)
            print("‚úÖ Panel inBIO secundario configurado")
        else:
            print("‚ÑπÔ∏è  Panel inBIO secundario ya existe")
        
        db.commit()
        print("‚úÖ Configuraci√≥n de dispositivos completada")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error configurando dispositivos: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def test_turnstile_connection():
    """Prueba la conexi√≥n con la talanquera"""
    print("\nüîß Probando conexi√≥n con talanquera...")
    
    # Configuraci√≥n para rel√© IP (ajustar seg√∫n tu hardware)
    turnstile_service = TurnstileService(
        connection_type="relay",
        relay_ip="192.168.1.102",  # IP del rel√©
        relay_port=1
    )
    
    # Probar conexi√≥n
    if turnstile_service.test_connection():
        print("‚úÖ Conexi√≥n con talanquera exitosa")
        
        # Probar apertura (solo por 1 segundo para prueba)
        result = turnstile_service.grant_access("TEST", 1)
        if result["success"]:
            print("‚úÖ Prueba de apertura de talanquera exitosa")
        else:
            print(f"‚ùå Error en prueba de apertura: {result['message']}")
    else:
        print("‚ùå No se pudo conectar con la talanquera")
        print("üí° Verifica la IP del rel√© y la configuraci√≥n de red")

def show_device_configuration():
    """Muestra la configuraci√≥n actual de dispositivos"""
    db = next(get_db())
    
    try:
        devices = db.query(DeviceConfig).all()
        
        if not devices:
            print("‚ùå No hay dispositivos configurados")
            return
        
        print("\nüì± Dispositivos configurados:")
        print("-" * 80)
        
        for device in devices:
            status = "üü¢ Activo" if device.is_active else "üî¥ Inactivo"
            turnstile = "‚úÖ Habilitada" if device.turnstile_enabled else "‚ùå Deshabilitada"
            
            print(f"Nombre: {device.device_name}")
            print(f"IP: {device.device_ip}:{device.device_port}")
            print(f"ID: {device.device_id}")
            print(f"Estado: {status}")
            print(f"Talanquera: {turnstile}")
            print(f"√öltima conexi√≥n: {device.last_connection or 'Nunca'}")
            print("-" * 80)
            
    except Exception as e:
        print(f"‚ùå Error mostrando configuraci√≥n: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ Configurando sistema de control de acceso...")
    
    # Configurar dispositivos
    configure_default_devices()
    
    # Mostrar configuraci√≥n
    show_device_configuration()
    
    # Probar talanquera (opcional)
    test_connection = input("\n¬øProbar conexi√≥n con talanquera? (s/n): ").lower()
    if test_connection == 's':
        test_turnstile_connection()
    
    print("\n‚úÖ Configuraci√≥n completada!")
    print("\nüìã Pr√≥ximos pasos:")
    print("1. Ajusta las IPs de los dispositivos en la base de datos")
    print("2. Configura la IP del rel√© de la talanquera")
    print("3. Prueba la conexi√≥n con los dispositivos ZKTeco")
    print("4. Realiza pruebas de enrolamiento y verificaci√≥n")
