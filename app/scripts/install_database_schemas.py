#!/usr/bin/env python3
"""
Script completo para instalar todos los esquemas de la base de datos del gimnasio
Incluye creaci√≥n de tablas, datos por defecto y configuraci√≥n inicial
"""

import sys
import os
from datetime import datetime, timedelta
from sqlalchemy.orm import Session

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from app.core.database import engine, SessionLocal, Base
from app.core.config import settings

# Importar todos los modelos para que SQLAlchemy los registre
from app.models.user import User, UserRole, BloodType, Gender
from app.models.membership import Membership, MembershipType, MembershipStatus, PaymentMethod
from app.models.clinical_history import ClinicalHistory, UserGoal, MembershipPlan, RecordType
from app.models.attendance import Attendance, AccessMethod
from app.models.inventory import (
    Product, Category, ProductStatus, StockMovement, 
    ProductCostHistory, InventoryReport, StockMovementType
)
from app.models.sales import Sale, SaleType, SaleProductItem
from app.models.fingerprint import (
    Fingerprint, AccessEvent, DeviceConfig, 
    FingerprintStatus, AccessEventStatus, DeviceType
)
from app.services.auth_service import AuthService

def print_header(title: str):
    """Imprime un encabezado formateado"""
    print("\n" + "="*60)
    print(f"üöÄ {title}")
    print("="*60)

def print_success(message: str):
    """Imprime un mensaje de √©xito"""
    print(f"‚úÖ {message}")

def print_info(message: str):
    """Imprime un mensaje informativo"""
    print(f"‚ÑπÔ∏è  {message}")

def print_error(message: str):
    """Imprime un mensaje de error"""
    print(f"‚ùå {message}")

def create_all_tables():
    """Crea todas las tablas de la base de datos"""
    print_header("CREANDO ESQUEMAS DE BASE DE DATOS")
    
    try:
        # Crear todas las tablas
        Base.metadata.create_all(bind=engine)
        
        print_success("Tablas principales creadas:")
        print("  üìã users - Usuarios del sistema")
        print("  üèãÔ∏è  memberships - Membres√≠as de usuarios")
        print("  üìä clinical_history - Historial cl√≠nico")
        print("  üéØ user_goals - Objetivos de usuarios")
        print("  üìã membership_plans - Planes de membres√≠a")
        print("  üìÖ attendances - Registro de asistencias")
        print("  üì¶ categories - Categor√≠as de productos")
        print("  üõí products - Inventario de productos")
        print("  üìà stock_movements - Movimientos de inventario")
        print("  üí∞ product_cost_history - Historial de costos")
        print("  üìä inventory_reports - Reportes de inventario")
        print("  üí≥ sales - Ventas realizadas")
        print("  üõçÔ∏è  sale_items - Items de ventas")
        print("  üëÜ fingerprints - Huellas dactilares")
        print("  üö™ access_events - Eventos de acceso")
        print("  üîß device_configs - Configuraci√≥n de dispositivos")
        
        return True
        
    except Exception as e:
        print_error(f"Error creando tablas: {e}")
        return False

def create_default_users():
    """Crea usuarios por defecto del sistema"""
    print_header("CREANDO USUARIOS POR DEFECTO")
    
    db = SessionLocal()
    auth_service = AuthService()
    
    try:
        # Usuarios por defecto
        default_users = [
            {
                "email": "admin@gym.com",
                "password": "admin123",
                "name": "Administrador del Sistema",
                "role": UserRole.ADMIN,
                "dni": "12345678",
                "phone": "3001234567"
            },
            {
                "email": "manager@gym.com",
                "password": "manager123",
                "name": "Gerente del Gimnasio",
                "role": UserRole.MANAGER,
                "dni": "87654321",
                "phone": "3007654321"
            },
            {
                "email": "trainer@gym.com",
                "password": "trainer123",
                "name": "Entrenador Principal",
                "role": UserRole.TRAINER,
                "dni": "11223344",
                "phone": "3009876543"
            },
            {
                "email": "receptionist@gym.com",
                "password": "reception123",
                "name": "Recepcionista",
                "role": UserRole.RECEPTIONIST,
                "dni": "44332211",
                "phone": "3005555555"
            },
            {
                "email": "member@gym.com",
                "password": "member123",
                "name": "Miembro de Ejemplo",
                "role": UserRole.MEMBER,
                "dni": "99887766",
                "phone": "3001111111",
                "gender": Gender.MALE,
                "blood_type": BloodType.O_POSITIVE
            }
        ]
        
        created_count = 0
        for user_data in default_users:
            # Verificar si el usuario ya existe
            existing_user = db.query(User).filter(User.email == user_data["email"]).first()
            if existing_user:
                continue
            
            # Crear hash de la contrase√±a
            password_hash = auth_service.get_password_hash(user_data["password"])
            
            # Crear usuario
            user = User(
                email=user_data["email"],
                password_hash=password_hash,
                name=user_data["name"],
                role=user_data["role"],
                dni=user_data.get("dni"),
                phone=user_data.get("phone"),
                gender=user_data.get("gender"),
                blood_type=user_data.get("blood_type"),
                is_active=True
            )
            
            db.add(user)
            created_count += 1
        
        db.commit()
        
        if created_count > 0:
            print_success(f"{created_count} usuarios creados exitosamente")
        else:
            print_info("Los usuarios por defecto ya existen")
            
        return True
        
    except Exception as e:
        print_error(f"Error creando usuarios: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def create_membership_plans():
    """Crea planes de membres√≠a por defecto"""
    print_header("CREANDO PLANES DE MEMBRES√çA")
    
    db = SessionLocal()
    
    try:
        # Verificar si ya existen planes
        existing_plans = db.query(MembershipPlan).count()
        
        if existing_plans == 0:
            plans = [
                MembershipPlan(
                    name="Plan B√°sico Mensual",
                    description="Acceso completo al gimnasio durante un mes. Incluye uso de equipos y piscina.",
                    plan_type="monthly",
                    price=120000,
                    duration_days=30,
                    access_hours_start="06:00",
                    access_hours_end="22:00",
                    includes_trainer=False,
                    includes_nutritionist=False,
                    includes_pool=True,
                    includes_classes=True,
                    max_guests=0,
                    is_active=True,
                    is_popular=True,
                    sort_order=1
                ),
                MembershipPlan(
                    name="Plan Premium Mensual",
                    description="Acceso completo con entrenador personal y nutricionista incluidos.",
                    plan_type="monthly",
                    price=200000,
                    discount_price=180000,
                    duration_days=30,
                    access_hours_start="05:00",
                    access_hours_end="23:00",
                    includes_trainer=True,
                    includes_nutritionist=True,
                    includes_pool=True,
                    includes_classes=True,
                    max_guests=2,
                    is_active=True,
                    is_popular=False,
                    sort_order=2
                ),
                MembershipPlan(
                    name="Acceso Diario",
                    description="Acceso por un d√≠a al gimnasio. Ideal para visitantes ocasionales.",
                    plan_type="daily",
                    price=15000,
                    duration_days=1,
                    access_hours_start="06:00",
                    access_hours_end="22:00",
                    includes_trainer=False,
                    includes_nutritionist=False,
                    includes_pool=False,
                    includes_classes=False,
                    max_guests=0,
                    is_active=True,
                    is_popular=False,
                    sort_order=3
                ),
                MembershipPlan(
                    name="Plan Estudiante",
                    description="Plan especial para estudiantes con descuento y horarios flexibles.",
                    plan_type="monthly",
                    price=100000,
                    discount_price=80000,
                    duration_days=30,
                    access_hours_start="14:00",
                    access_hours_end="20:00",
                    includes_trainer=False,
                    includes_nutritionist=False,
                    includes_pool=True,
                    includes_classes=True,
                    max_guests=1,
                    is_active=True,
                    is_popular=False,
                    sort_order=4
                ),
                MembershipPlan(
                    name="Plan Trimestral",
                    description="Membres√≠a por 3 meses con descuento especial.",
                    plan_type="quarterly",
                    price=320000,
                    discount_price=300000,
                    duration_days=90,
                    access_hours_start="06:00",
                    access_hours_end="22:00",
                    includes_trainer=False,
                    includes_nutritionist=False,
                    includes_pool=True,
                    includes_classes=True,
                    max_guests=1,
                    is_active=True,
                    is_popular=True,
                    sort_order=5
                )
            ]
            
            for plan in plans:
                db.add(plan)
            
            db.commit()
            print_success(f"{len(plans)} planes de membres√≠a creados")
        else:
            print_info(f"Ya existen {existing_plans} planes de membres√≠a")
            
        return True
        
    except Exception as e:
        print_error(f"Error creando planes de membres√≠a: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def create_product_categories():
    """Crea categor√≠as de productos por defecto"""
    print_header("CREANDO CATEGOR√çAS DE PRODUCTOS")
    
    db = SessionLocal()
    
    try:
        # Verificar si ya existen categor√≠as
        existing_categories = db.query(Category).count()
        
        if existing_categories == 0:
            categories = [
                Category(
                    name="Suplementos",
                    description="Prote√≠nas, vitaminas y suplementos nutricionales",
                    color="#FF6B6B",
                    icon="supplement",
                    sort_order=1
                ),
                Category(
                    name="Bebidas",
                    description="Bebidas energ√©ticas, agua y jugos naturales",
                    color="#4ECDC4",
                    icon="drink",
                    sort_order=2
                ),
                Category(
                    name="Snacks Saludables",
                    description="Barras energ√©ticas, frutos secos y snacks nutritivos",
                    color="#45B7D1",
                    icon="snack",
                    sort_order=3
                ),
                Category(
                    name="Accesorios",
                    description="Guantes, correas, toallas y accesorios de entrenamiento",
                    color="#96CEB4",
                    icon="accessory",
                    sort_order=4
                ),
                Category(
                    name="Ropa Deportiva",
                    description="Camisetas, shorts y ropa deportiva del gimnasio",
                    color="#FFEAA7",
                    icon="clothing",
                    sort_order=5
                )
            ]
            
            for category in categories:
                db.add(category)
            
            db.commit()
            print_success(f"{len(categories)} categor√≠as de productos creadas")
        else:
            print_info(f"Ya existen {existing_categories} categor√≠as de productos")
            
        return True
        
    except Exception as e:
        print_error(f"Error creando categor√≠as: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def create_sample_products():
    """Crea productos de ejemplo"""
    print_header("CREANDO PRODUCTOS DE EJEMPLO")
    
    db = SessionLocal()
    
    try:
        # Verificar si ya existen productos
        existing_products = db.query(Product).count()
        
        if existing_products == 0:
            # Obtener categor√≠as
            categories = {cat.name: cat.id for cat in db.query(Category).all()}
            
            products = [
                # Suplementos
                Product(
                    category_id=categories.get("Suplementos"),
                    name="Prote√≠na Whey Premium",
                    description="Prote√≠na de suero de alta calidad, sabor vainilla",
                    barcode="7891234567890",
                    sku="PROT-WHY-VAN-1KG",
                    current_cost=85000,
                    selling_price=120000,
                    current_stock=25,
                    min_stock=5,
                    max_stock=50,
                    unit_of_measure="kg",
                    weight_per_unit=1.0,
                    status="active"
                ),
                Product(
                    category_id=categories.get("Suplementos"),
                    name="Creatina Monohidrato",
                    description="Creatina pura para aumentar fuerza y masa muscular",
                    barcode="7891234567891",
                    sku="CREAT-MONO-300G",
                    current_cost=35000,
                    selling_price=50000,
                    current_stock=30,
                    min_stock=10,
                    max_stock=60,
                    unit_of_measure="gramos",
                    weight_per_unit=300,
                    status="active"
                ),
                # Bebidas
                Product(
                    category_id=categories.get("Bebidas"),
                    name="Bebida Energ√©tica Natural",
                    description="Bebida isot√≥nica natural con electrolitos",
                    barcode="7891234567892",
                    sku="BEB-ENER-500ML",
                    current_cost=2500,
                    selling_price=4000,
                    current_stock=100,
                    min_stock=20,
                    max_stock=200,
                    unit_of_measure="ml",
                    weight_per_unit=500,
                    status="active"
                ),
                Product(
                    category_id=categories.get("Bebidas"),
                    name="Agua Purificada",
                    description="Agua purificada en botella de 500ml",
                    barcode="7891234567893",
                    sku="AGUA-PUR-500ML",
                    current_cost=800,
                    selling_price=1500,
                    current_stock=150,
                    min_stock=30,
                    max_stock=300,
                    unit_of_measure="ml",
                    weight_per_unit=500,
                    status="active"
                ),
                # Snacks
                Product(
                    category_id=categories.get("Snacks Saludables"),
                    name="Barra Proteica Chocolate",
                    description="Barra energ√©tica alta en prote√≠na, sabor chocolate",
                    barcode="7891234567894",
                    sku="BAR-PROT-CHOC-60G",
                    current_cost=1800,
                    selling_price=3000,
                    current_stock=80,
                    min_stock=15,
                    max_stock=150,
                    unit_of_measure="gramos",
                    weight_per_unit=60,
                    status="active"
                ),
                # Accesorios
                Product(
                    category_id=categories.get("Accesorios"),
                    name="Guantes de Entrenamiento",
                    description="Guantes acolchados para levantamiento de pesas",
                    barcode="7891234567895",
                    sku="GUANT-ENTR-L",
                    current_cost=15000,
                    selling_price=25000,
                    current_stock=20,
                    min_stock=5,
                    max_stock=40,
                    unit_of_measure="unidad",
                    status="active"
                ),
                Product(
                    category_id=categories.get("Accesorios"),
                    name="Toalla Deportiva",
                    description="Toalla de microfibra absorbente para gimnasio",
                    barcode="7891234567896",
                    sku="TOAL-DEPORT-MED",
                    current_cost=8000,
                    selling_price=15000,
                    current_stock=35,
                    min_stock=10,
                    max_stock=70,
                    unit_of_measure="unidad",
                    status="active"
                )
            ]
            
            for product in products:
                db.add(product)
            
            db.commit()
            print_success(f"{len(products)} productos de ejemplo creados")
        else:
            print_info(f"Ya existen {existing_products} productos")
            
        return True
        
    except Exception as e:
        print_error(f"Error creando productos: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def create_device_config():
    """Crea configuraci√≥n de dispositivos por defecto"""
    print_header("CREANDO CONFIGURACI√ìN DE DISPOSITIVOS")
    
    db = SessionLocal()
    
    try:
        # Verificar si ya existe configuraci√≥n
        existing_devices = db.query(DeviceConfig).count()
        
        if existing_devices == 0:
            devices = [
                DeviceConfig(
                    device_name="Dispositivo Principal - Entrada",
                    device_ip="192.168.1.100",
                    device_port=4370,
                    device_id="MAIN_ENTRANCE_01",
                    device_type=DeviceType.INBIO_PANEL,
                    is_active=True,
                    auto_sync=True,
                    sync_interval=300,
                    turnstile_enabled=True,
                    turnstile_relay_port=1,
                    access_duration=5
                ),
                DeviceConfig(
                    device_name="Dispositivo Secundario - Salida",
                    device_ip="192.168.1.101",
                    device_port=4370,
                    device_id="MAIN_EXIT_01",
                    device_type=DeviceType.ZKT_STANDALONE,
                    is_active=True,
                    auto_sync=True,
                    sync_interval=300,
                    turnstile_enabled=True,
                    turnstile_relay_port=1,
                    access_duration=3
                )
            ]
            
            for device in devices:
                db.add(device)
            
            db.commit()
            print_success(f"{len(devices)} dispositivos configurados")
        else:
            print_info(f"Ya existen {existing_devices} dispositivos configurados")
            
        return True
        
    except Exception as e:
        print_error(f"Error configurando dispositivos: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def print_credentials():
    """Imprime las credenciales de acceso"""
    print_header("CREDENCIALES DE ACCESO")
    
    print("üîê Usuarios creados:")
    print("   üë§ Administrador:")
    print("      üìß Email: admin@gym.com")
    print("      üîë Contrase√±a: admin123")
    print()
    print("   üë§ Gerente:")
    print("      üìß Email: manager@gym.com")
    print("      üîë Contrase√±a: manager123")
    print()
    print("   üë§ Entrenador:")
    print("      üìß Email: trainer@gym.com")
    print("      üîë Contrase√±a: trainer123")
    print()
    print("   üë§ Recepcionista:")
    print("      üìß Email: receptionist@gym.com")
    print("      üîë Contrase√±a: reception123")
    print()
    print("   üë§ Miembro de ejemplo:")
    print("      üìß Email: member@gym.com")
    print("      üîë Contrase√±a: member123")

def main():
    """Funci√≥n principal del script"""
    print_header("INSTALACI√ìN COMPLETA DE ESQUEMAS DE BASE DE DATOS")
    print("Este script instalar√° todos los esquemas necesarios para el sistema del gimnasio")
    
    success_count = 0
    total_steps = 6
    
    # Paso 1: Crear tablas
    if create_all_tables():
        success_count += 1
    
    # Paso 2: Crear usuarios por defecto
    if create_default_users():
        success_count += 1
    
    # Paso 3: Crear planes de membres√≠a
    if create_membership_plans():
        success_count += 1
    
    # Paso 4: Crear categor√≠as de productos
    if create_product_categories():
        success_count += 1
    
    # Paso 5: Crear productos de ejemplo
    if create_sample_products():
        success_count += 1
    
    # Paso 6: Configurar dispositivos
    if create_device_config():
        success_count += 1
    
    # Resumen final
    print_header("RESUMEN DE INSTALACI√ìN")
    
    if success_count == total_steps:
        print_success(f"¬°Instalaci√≥n completada exitosamente! ({success_count}/{total_steps} pasos)")
        print_success("Todos los esquemas de base de datos han sido instalados correctamente")
        print_credentials()
        
        print("\nüöÄ Pr√≥ximos pasos:")
        print("   1. Verificar la conexi√≥n a la base de datos")
        print("   2. Configurar las IPs de los dispositivos ZKTeco")
        print("   3. Probar el login con las credenciales proporcionadas")
        print("   4. Configurar los planes de membres√≠a seg√∫n sus necesidades")
        
    else:
        print_error(f"Instalaci√≥n parcial: {success_count}/{total_steps} pasos completados")
        print("‚ö†Ô∏è  Revise los errores anteriores y ejecute el script nuevamente")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    main()
